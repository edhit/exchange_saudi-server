require('dotenv').config()
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const { Telegraf, Markup } = require('telegraf');
const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Express
const app = express();

// Middleware
app.use(express.json());
app.use(cors());
app.use(bodyParser.json());
app.use((req, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header(
      "Access-Control-Allow-Headers",
      "Origin, X-Requested-With, Content-Type, Accept"
    );
    next();
  });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const mongoURI = process.env.MONGO_URI; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à URI
mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω'))
  .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

// –°—Ö–µ–º–∞ –∏ –º–æ–¥–µ–ª—å Mongoose
const cargoSchema = new mongoose.Schema({
  type: {
    type: String,
    required: true,
    trim: true,
  },
  weight: {
    type: Number,
    required: true,
    min: 0,
  },
  price: {
    type: Number,
    required: true,
    min: 0, 
  },
  from: {
    type: String,
    required: true,
    trim: true,
  },
  to: {
    type: String,
    required: true,
    trim: true,
  },
  comment: {
    type: String,
    default: '',
    trim: true,
  },
  username: {
    type: String,
    required: true,
    trim: true,
  },
}, { timestamps: true });

const Cargo = mongoose.model('Cargo', cargoSchema);

// CRUD –º–∞—Ä—à—Ä—É—Ç—ã

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
app.get('/api/cargos', async (req, res) => {
    try {
      const { 
        from, 
        to, 
        minPrice, 
        maxPrice, 
        minWeight, 
        maxWeight, 
        sortBy, 
        sortOrder, 
        page = 1, 
        limit = 10 
      } = req.query;
  
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–∞
      const filter = {};
  
      if (from) filter.from = from.trim();
      if (to) filter.to = to.trim();
  
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
      if (minPrice || maxPrice) {
        filter.price = {};
        if (minPrice) filter.price.$gte = Number(minPrice); // –ë–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ
        if (maxPrice) filter.price.$lte = Number(maxPrice); // –ú–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ
      }
  
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–µ—Å—É
      if (minWeight || maxWeight) {
        filter.weight = {};
        if (minWeight) filter.weight.$gte = Number(minWeight); // –ë–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ
        if (maxWeight) filter.weight.$lte = Number(maxWeight); // –ú–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ
      }
  
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      let sort = {};
      if (sortBy) {
        const order = sortOrder === 'desc' ? -1 : 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        sort[sortBy] = order;
      }
  
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      const pageNumber = Math.max(1, parseInt(page)); // –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
      const pageSize = Math.max(1, parseInt(limit)); // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10
      const skip = (pageNumber - 1) * pageSize;
  
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
      const cargos = await Cargo.find(filter)
        .sort(sort)
        .skip(skip)
        .limit(pageSize);
  
      // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
      const totalCargos = await Cargo.countDocuments(filter);
  
      res.json({
        total: totalCargos, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        page: pageNumber,   // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        limit: pageSize,    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        cargos,             // –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
      });
    } catch (err) {
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
    }
  });
  

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
app.post('/api/cargos', async (req, res) => {
  try {
    const { type, weight, price, from, to, comment } = req.body.data;
    const { chatId, username } = req.body.user;

    const newCargo = new Cargo({
      type,
      weight,
      price,
      from,
      to,
      comment,
      username,
    });

    const savedCargo = await newCargo.save();

    // –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
    await bot.telegram.sendMessage(
        chatId, // ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message,
        Markup.inlineKeyboard([
          Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å', `delete_${savedCargo._id}`)
        ])
      );

    res.status(201).json(savedCargo);
  } catch (err) {
    res.status(400).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏', error: err.message });
  }
});

bot.start(async(ctx) => {
    try {
        await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ WebApp, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'Cargo',
                    url: process.env.WEB_APP, // –£–∫–∞–∂–∏—Ç–µ URL –≤–∞—à–µ–≥–æ WebApp
                  },
                ],
              ],
            },
          });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.');
      }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
bot.action(/delete_(.+)/, async (ctx) => {
    try {
      const cargoId = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
  
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ MongoDB
      const deletedCargo = await Cargo.findByIdAndDelete(cargoId);
  
      if (deletedCargo) {
        await ctx.editMessageText(`–ó–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞:\n\n${deletedCargo.type} (${deletedCargo.weight} –∫–≥)`);
      } else {
        await ctx.reply('–ó–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', err);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.');
    }
  });

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID
// app.get('/api/cargos/:id', async (req, res) => {
//   try {
//     const cargo = await Cargo.findById(req.params.id);
//     if (!cargo) return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
//     res.json(cargo);
//   } catch (err) {
//     res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
//   }
// });

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID
// app.put('/api/cargos/:id', async (req, res) => {
//   try {
//     const { type, weight, price, from, to, comment, username } = req.body;

//     const updatedCargo = await Cargo.findByIdAndUpdate(
//       req.params.id,
//       { type, weight, price, from, to, comment, username },
//       { new: true, runValidators: true }
//     );

//     if (!updatedCargo) return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

//     res.json(updatedCargo);
//   } catch (err) {
//     res.status(400).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏', error: err.message });
//   }
// });

// –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID
app.delete('/api/cargos/:id', async (req, res) => {
  try {
    const deletedCargo = await Cargo.findByIdAndDelete(req.params.id);
    if (!deletedCargo) return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    res.json({ message: '–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞', cargo: deletedCargo });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT ? process.env.PORT : 3000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
bot.launch();
