require("dotenv").config();
const path = require("path");
const { Telegraf, Markup } = require("telegraf");
const mongoose = require("mongoose");
const express = require("express");
const cors = require('cors');
// const morgan = require('morgan');
const compression = require("compression");
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");
const slowDown = require("express-slow-down");
const Redis = require("ioredis");
const winston = require("winston");
const CurrencyExchange = require("./models/CurrencyExchange");
const User = require("./models/user");

const {
  MONGODB_URL,
  WEBHOOK,
  BOT_TOKEN,
  SECRET,
  START,
  EXPRESS_PORT,
  REDIS_HOST,
  REDIS_PORT,
  CORS
} = process.env;

const logger = winston.createLogger({
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console({ level: "debug" }), // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    new winston.transports.File({
      filename: path.join(__dirname, "logs", "error.log"),
      level: "error",
    }), // –õ–æ–≥–∏ –æ—à–∏–±–æ–∫
    new winston.transports.File({
      filename: path.join(__dirname, "logs", "combined.log"),
    }), // –û–±—â–∏–µ –ª–æ–≥–∏
  ],
});

const app = express();
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
});
const speedLimiter = slowDown({
  windowMs: 15 * 60 * 1000, // 15 minutes
  delayAfter: 100, // Allow 100 requests per 15 minutes
  delayMs: (used, req) => {
    const delayAfter = req.slowDown.limit;
    return (used - delayAfter) * 500; // Increase delay for each request over limit
  },
});
const allowedOrigins = [
  CORS
];
app.use(cors({
  origin: function(origin, callback) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    if (allowedOrigins.includes(origin) || !origin) {
      callback(null, true);  // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
    } else {
      callback(new Error('Not allowed by CORS'));  // –û—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–æ—Å—Ç—É–ø–µ
    }
  },
  methods: ['GET', 'POST'],  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
}));
// app.use(morgan('combined'));
app.set("trust proxy", 1);
app.use(express.json());
app.use(helmet());
app.use(limiter);
app.use(speedLimiter);
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header(
    "Access-Control-Allow-Headers",
    "Origin, X-Requested-With, Content-Type, Accept"
  );
  next();
});
app.use(
  compression({
    level: 6, // –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è (0-9), 6 ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Å–∂–∞—Ç–∏–µ–º
    threshold: 1024, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è (1KB)
    brotliEnabled: true,
  })
);

app.use((err, req, res, next) => {
  logger.error(`Error: ${err.message}`);
  res.status(500).json({ error: "Something went wrong!" });
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const db = mongoose
  .connect(MONGODB_URL)
  .then(() => logger.info("Connected to MongoDB"))
  .catch((err) => logger.error("Error connecting to MongoDB:", err));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
const redis = new Redis({
  host: REDIS_HOST,
  port: REDIS_PORT,
});

redis.on("connect", () => {
  logger.info("Connected to Redis");
});

redis.on("error", (err) => {
  logger.error("Redis error:", err);
});

// –ë–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º
const bot = new Telegraf(BOT_TOKEN);

const path_url = SECRET;
if (WEBHOOK === "") {
  // LONG POLLING
  bot.launch();
} else {
  // –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö WEBHOOK
  const webhookUrl = `${WEBHOOK}/${path_url}`;
  bot.telegram.setWebhook(webhookUrl);

  app.post(`/${path_url}`, (req, res) => {
    bot.handleUpdate(req.body, res);
  });
}

bot.start(async (ctx) => {
  try {
    logger.error("dads");
    const text = START
      ? START
      : `‚ú® –ê—Å-—Å–∞–ª—è–º—É ‚Äò–∞–ª—è–π–∫—É–º –≤–∞ —Ä–∞—Ö–º–∞—Ç—É-–õ–ª–∞—Ö–∏ –≤–∞ –±–∞—Ä–∞–∫—è—Ç—É\n\nüí± –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ "P2P", –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–≤–µ—Ä—Ö—É. \n\nü§ñ –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏ –Ω–∞ "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å", –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä—è–¥–æ–º —Å "–°–æ–æ–±—â–µ–Ω–∏–µ".\n\n‚ÑπÔ∏è –û –±–æ—Ç–µ /help`;

    if (ctx.chat && ctx.chat.username) {
      const existingUser = await User.findOne({ id: ctx.chat.id });

      if (!existingUser) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const newUser = new User({
          id: ctx.chat.id,
          username: ctx.chat.username,
        });

        await newUser.save();
      }

      await ctx.reply(text, {
        // reply_markup: {
        //    inline_keyboard: [
        //      [
        //        {
        //          text: "P2P",
        //          url: `https://t.me/${LINK}`, // –£–∫–∞–∂–∏—Ç–µ URL –≤–∞—à–µ–≥–æ WebApp
        //        },
        //      ],
        //    ],
        //  },
        disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
      });
    } else {
      await ctx.reply(
        "‚ú® –ê—Å-—Å–∞–ª—è–º—É ‚Äò–∞–ª—è–π–∫—É–º –≤–∞ —Ä–∞—Ö–º–∞—Ç—É-–õ–ª–∞—Ö–∏ –≤–∞ –±–∞—Ä–∞–∫—è—Ç—É\n\nüõÇ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
      );
    }
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ." + err);
  }
});

bot.help(async (ctx) => {
  try {
    await ctx.reply(`
üì£ –ë–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏ –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –∫—É–ø–ª–µ-–ø—Ä–æ–¥–∞–∂–µ –≤–∞–ª—é—Ç, –ø–æ–¥–æ–±–Ω–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º, —Ç–∞–∫–∏–º –∫–∞–∫ Bybit P2P. –ù–∞–π–¥–∏—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –æ–±–º–µ–Ω–∞.
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:

1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:
‚Ä¢ üí± –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏ (USD, USDT, RUB, KZT, USD, UZS, SAR, TRY).
‚Ä¢ üí≤ –£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏.
‚Ä¢ üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è —Å–¥–µ–ª–∫–∏ (–ú–µ–∫–∫–∞, –ú–µ–¥–∏–Ω–∞, –î–∂–∏–¥–¥–∞, –≠—Ä-–†–∏—è–¥).
‚Ä¢ üîÑ –£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞: –Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–Ω–∞–ª–∏—á–Ω—ã–π), –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ (–ø–µ—Ä–µ–≤–æ–¥) –∏–ª–∏ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.
‚Ä¢ ‚úçÔ∏è –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é.

2Ô∏è‚É£ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π:
‚Ä¢ üìú –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≥–æ—Ä–æ–¥–∞–º –∏ –≤–∞–ª—é—Ç–∞–º.
‚Ä¢ üëÅÔ∏è‚Äçüó®Ô∏è –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ P2P-–æ–±—ä—è–≤–ª–µ–Ω–∏—è Bybit.
‚Ä¢ üì© –ö –∫–∞–∂–¥–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç —Å –∞–≤—Ç–æ—Ä–æ–º.

3Ô∏è‚É£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏:
‚Ä¢ üóÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª—è—Ç—å –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
‚Ä¢ üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ üìù –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–æ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —É–¥–æ–±–Ω–æ–µ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
‚Ä¢ üîó –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∑–∞–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É Telegram —Å –ø–æ–º–æ—â—å—é –∑–∞—Ä–∞–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏.

5Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:
‚Ä¢ üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API Google –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
üåü –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±–æ—Ç–∞:

‚Ä¢ ‚úÖ –£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤.
‚Ä¢ üîç –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: —á–µ—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Å–¥–µ–ª–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å–≤—è–∑—å: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ Telegram-—á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
‚Ä¢ üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∞–ª—é—Ç: —Ä–∞—Å—Å—á–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–ª—é—Ç –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.
      `);
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ." + err);
  }
});

bot.action(/delete_(.+)/, async (ctx) => {
  try {
    const callbackData = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—Ä—É–ø–ø—ã (.+)
    const message = ctx.callbackQuery.message.text; // –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å callback
    const [id] = callbackData.split("_");

    await CurrencyExchange.findByIdAndDelete(id);

    await ctx.editMessageText(
      `${message}\n\n<b>‚≠ïÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>`,
      {
        parse_mode: "HTML",
        disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
      }
    );

    await ctx.answerCbQuery("‚≠ïÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", err);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.");
  }
});

// CRUD
app.post("/api/sendMessage", async (req, res) => {
  try {
    const {
      type,
      sellCurrency,
      buyCurrency,
      amount,
      rate,
      city,
      exchange,
      comment,
    } = req.body.data;

    const { id, username } = req.body.user;

    let buy, sell;
    if (type === "–ö—É–ø–∏—Ç—å") {
      sell = buyCurrency;
      buy = sellCurrency;
    } else {
      sell = sellCurrency;
      buy = buyCurrency;
    }
    const typeIcon =
      type === "–ö—É–ø–∏—Ç—å"
        ? `üü¢ –ü–æ–∫—É–ø–∫–∞ ${buy} –∑–∞ ${sell}`
        : `üî¥ –ü—Ä–æ–¥–∞–∂–∞ ${sell} –∑–∞ ${buy}`;
    // üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã
    let message = `
    ${typeIcon}
    ‚îú –í–∞–ª—é—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏: ${sell}
    ‚îú –í–∞–ª—é—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${buy}
    ‚îú –°—É–º–º–∞: ${amount} ${sellCurrency}
    ‚îú –ö—É—Ä—Å: ${rate}
    ‚îú –ì–æ—Ä–æ–¥: ${city}
    ${comment ? `‚îú: ${comment}` : "‚îî"}–°–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞: ${exchange}
    ${comment ? `‚îî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}` : ""}
    `;
    
    
    // –°–æ–∑–¥–∞—ë–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB
    const newExchange = new CurrencyExchange({
      transactionType: type || "", // –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–º–µ–Ω)
      currencyFrom: sellCurrency || "", // –í–∞–ª—é—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏
      amountFromCurrency: amount || 0, // –°—É–º–º–∞
      currencyTo: buyCurrency || "", // –í–∞–ª—é—Ç–∞ –ø–æ–∫—É–ø–∫–∏
      exchangeRate: rate || "", // –ö—É—Ä—Å –æ–±–º–µ–Ω–∞
      city: city || "", // –ì–æ—Ä–æ–¥
      exchangeMethod: exchange || "", // –°–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞
      additionalComments: comment || "", // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      username: username || "",
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    const order = await newExchange.save();

    await bot.telegram.sendMessage(
      req.body.user.chatId, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      message,
      {
        ...Markup.inlineKeyboard([
          Markup.button.callback(
            "üõë –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            `delete_${order._id}`
          ),
        ]),
        disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
      }
    );

    res.send(message);
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", err);
    res.status(400).json({
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏",
      error: err.message,
    });
  }
});

// READ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
app.get("/api/getOrders", async (req, res) => {
  try {
    const { currencyFrom, currencyTo, city, transactionType } = req.query;

    if (!currencyFrom || !currencyTo || !city || !transactionType) {
      return res.status(400).json({
        message: "Require: currencyFrom, currencyTo, city, transactionType.",
        data: [],
      });
    }

    const filter = {};

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if (req.query.transactionType) {
      filter.transactionType = req.query.transactionType.trim();
    }
    if (req.query.currencyFrom) {
      filter.currencyFrom = req.query.currencyFrom.trim();
    }
    if (req.query.currencyTo) {
      filter.currencyTo = req.query.currencyTo.trim();
    }
    if (req.query.city) {
      filter.city = req.query.city.trim();
    }
    if (req.query.exchangeMethod) {
      filter.exchangeMethod = req.query.exchangeMethod.trim();
    }
    if (req.query.minAmount || req.query.maxAmount) {
      const minAmount = req.query.minAmount
        ? Number(req.query.minAmount)
        : undefined;
      const maxAmount = req.query.maxAmount
        ? Number(req.query.maxAmount)
        : undefined;

      if (isNaN(minAmount) && req.query.minAmount) {
        return res.status(400).json({ error: "Invalid minAmount value" });
      }
      if (isNaN(maxAmount) && req.query.maxAmount) {
        return res.status(400).json({ error: "Invalid maxAmount value" });
      }

      filter.amountFromCurrency = {};
      if (minAmount !== undefined) filter.amountFromCurrency.$gte = minAmount;
      if (maxAmount !== undefined) filter.amountFromCurrency.$lte = maxAmount;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const allowedSortFields = [
      "createdAt",
      "amountFromCurrency",
      "exchangeRate",
    ]; // –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–æ–ª–µ–π
    const sortBy = allowedSortFields.includes(req.query.sort)
      ? req.query.sort
      : "createdAt";
    const order = req.query.order === "desc" ? -1 : 1;

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    if (limit <= 0) {
      return res.status(400).json({ error: "Limit must be greater than 0" });
    }

    const skip = (page - 1) * limit;

    // –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const exchanges = await CurrencyExchange.find(filter)
      .sort({ [sortBy]: order })
      .skip(skip)
      .limit(limit);

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const total = await CurrencyExchange.countDocuments(filter);

    res.status(200).json({
      total,
      page,
      totalPages: Math.ceil(total / limit),
      data: exchanges,
    });
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:", err);
    res
      .status(500)
      .json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π", details: err.message });
  }
});

const PORT = EXPRESS_PORT || 3000;
app.listen(PORT, () => {
  logger.info(`listening on port ${PORT}`);
});
