require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");

const express = require("express");
const app = express();
app.use(express.json());
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header(
    "Access-Control-Allow-Headers",
    "Origin, X-Requested-With, Content-Type, Accept"
  );
  next();
});

const bot = new Telegraf(process.env.BOT_TOKEN);

const path_url = process.env.SECRET;
if (process.env.WEBHOOK === "") {
  bot.launch();
} else {
  const webhookUrl = `${process.env.WEBHOOK}/${path_url}`;
  bot.telegram.setWebhook(webhookUrl);

  app.post(`/${path_url}`, (req, res) => {
    bot.handleUpdate(req.body, res);
  });
}

const text = process.env.START
  ? process.env.START
  : `‚ú® –ê—Å-—Å–∞–ª—è–º—É ‚Äò–∞–ª—è–π–∫—É–º –≤–∞ —Ä–∞—Ö–º–∞—Ç—É-–õ–ª–∞—Ö–∏ –≤–∞ –±–∞—Ä–∞–∫—è—Ç—É\n\nü§ñ –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏ –Ω–∞ "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å", –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä—è–¥–æ–º —Å "–°–æ–æ–±—â–µ–Ω–∏–µ". \n\nüí± –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏ –Ω–∞ "P2P", –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–≤–µ—Ä—Ö—É.`;

bot.start(async (ctx) => {
  try {
    if (ctx.chat && ctx.chat.username) {
      await ctx.unpinAllChatMessages();
      const message_data = await ctx.reply(text, {
        reply_markup: {
           inline_keyboard: [
             [
               {
                 text: "P2P",
                 url: `https://t.me/${process.env.LINK}`, // –£–∫–∞–∂–∏—Ç–µ URL –≤–∞—à–µ–≥–æ WebApp
               },
             ],
           ],
         },
        disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
      });
      await ctx.pinChatMessage(message_data.message_id);
    } else {
      await ctx.reply(
        "‚ú® –ê—Å-—Å–∞–ª—è–º—É ‚Äò–∞–ª—è–π–∫—É–º –≤–∞ —Ä–∞—Ö–º–∞—Ç—É-–õ–ª–∞—Ö–∏ –≤–∞ –±–∞—Ä–∞–∫—è—Ç—É\n\nüõÇ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
      );
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ." + err);
  }
});

bot.action(/delete_(.+)/, async (ctx) => {
  try {
    const callbackData = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—Ä—É–ø–ø—ã (.+)
    const message = ctx.callbackQuery.message.text.replace("#order", ""); // –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å callback
    const [messageId] = callbackData.split("_");

      await bot.telegram.editMessageText(
        process.env.GROUP, // –õ–∏–±–æ ID –∫–∞–Ω–∞–ª–∞
        messageId, // ID —Å–æ–æ–±—â–µ–Ω–∏—è
        undefined, // inlineMessageId, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        `${message}\n\n<b>‚≠ïÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>`,
        {
          parse_mode: "HTML", // –£–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
          disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
        }
      );

      await ctx.editMessageText(
        `${message}\n\n<b>‚≠ïÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>`,
        {
          parse_mode: "HTML",
          disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
        }
      );

      await ctx.answerCbQuery('‚≠ïÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.");
  }
});

app.post("/api/sendMessage", async (req, res) => {
  try {
    let buy, sell;
    if (req.body.data.type === "–ö—É–ø–∏—Ç—å") {
      sell = req.body.data.buyCurrency;
      buy = req.body.data.sellCurrency;
    } else {
      sell = req.body.data.sellCurrency;
      buy = req.body.data.buyCurrency;
    }
    const typeIcon = req.body.data.type === "–ö—É–ø–∏—Ç—å" ? `üü¢ –ü–æ–∫—É–ø–∫–∞ ${buy} –∑–∞ ${sell}` : `üî¥ –ü—Ä–æ–¥–∞–∂–∞ ${sell} –∑–∞ ${buy}`;
// üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã
    let message = `
    ${typeIcon}
    üí∏ –í–∞–ª—é—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏:#SELL_${sell}
    üí∞ –í–∞–ª—é—Ç–∞ –ø–æ–∫—É–ø–∫–∏:#BUY_${buy}
    üíµ –°—É–º–º–∞: ${req.body.data.amount}
    üìä –ö—É—Ä—Å: ${req.body.data.rate}
    üèôÔ∏è –ì–æ—Ä–æ–¥: ${req.body.data.city}
    üîÑ –°–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞: ${req.body.data.exchange}
    ${req.body.data.comment ? `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${req.body.data.comment}` : ""}
#order #${sell}_${buy}
    `;

// üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${req.body.data.delivery}

    let message_data = await bot.telegram.sendMessage(
      process.env.GROUP, // ID –∫–∞–Ω–∞–ª–∞
      message,
      {
        ...Markup.inlineKeyboard([
          Markup.button.url(
            `–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ`,
            `https://t.me/${req.body.user.username}`
          ),
        ]),
        disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
      }
    );

    if (message_data) {
      await bot.telegram.sendMessage(
        req.body.user.chatId, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message,
        {
          ...Markup.inlineKeyboard([
            Markup.button.callback(
              "üõë –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
              `delete_${message_data.message_id}`
            ),
            Markup.button.url(
              "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
              `https://t.me/${process.env.LINK}/${message_data.message_id}`
            ),
          ]),
          disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
        }
      );
    }

    res.send(message);
  } catch (error) {
    res.status(400).json({
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏",
      error: error.message,
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`listening on port ${PORT}`);
});
